"""
Django settings for sample project.

Generated by 'django-admin startproject' using Django 3.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
import sys
import errno
import string
import random
import importlib


# Helpers to load data from files
def get_path(filename, mkdir=True):
    path = os.path.expanduser(filename)
    if mkdir:
        try:
            os.makedirs(os.path.dirname(path))
        except OSError as e:
            if e.errno != errno.EEXIST:
                raise e
    return path


def get_data(filename, mkdir=True):
    return open(get_path(filename, mkdir=mkdir)).read().strip()


# Helper to get per-instance settings
def get_instance_settings(path):
    if not os.path.isfile(path):
        open(path, 'w').write('# Put instance settings here\n')
    name = f'{__name__}.instance'
    spec = importlib.util.spec_from_file_location(name, path)
    mod = importlib.util.module_from_spec(spec)
    sys.modules[name] = mod
    spec.loader.exec_module(mod)
    return mod


# helper to generate and persist a secret key
def get_secret_key(path):
    if not os.path.isfile(path):
        path = get_path(path)
        secret = ''.join([random.choice(string.ascii_letters + string.digits) for n in range(64)])
        open(path, 'w').write(secret)
        os.chmod(path, 0o600)
    return get_data(path)


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# The name of the project as given in django-admin startproject
PROJECT_NAME = os.path.basename(BASE_DIR)


# The directory where instance related data is stored
INSTANCE_DIR = os.path.join(sys.prefix, 'var')


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/
SECRET_KEY = get_secret_key(os.path.join(INSTANCE_DIR, 'secret'))


# load instance settings
instance = get_instance_settings(os.path.join(INSTANCE_DIR, 'settings.py'))


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = getattr(instance, 'DEBUG', True)


ALLOWED_HOSTS = getattr(instance, 'ALLOWED_HOSTS', [])


# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'hello',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'sample.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'sample.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases
DATABASES = getattr(instance, 'DATABASES', {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
})


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/
LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/
STATIC_URL = '/static/'
STATIC_ROOT = get_path(os.path.join(INSTANCE_DIR, 'www', 'static'))
